#VRML V2.0 utf8

EXTERNPROTO TranslateGizmo [
	exposedField  SFVec3f     translation
	exposedField  SFRotation  rotation
	exposedField  SFVec3f     scale
	eventOut      SFTime      dragStart
	eventOut      SFTime      dragEnd
	eventOut      SFVec3f     delta_changed
] "proto.TranslateGizmo.wrl#TranslateGizmo"

EXTERNPROTO RotateGizmo [
	exposedField  SFVec3f     translation
	exposedField  SFRotation  rotation
	exposedField  SFVec3f     scale
	eventOut      SFTime      dragStart
	eventOut      SFTime      dragEnd
	eventOut      SFRotation  delta_changed
] "proto.RotateGizmo.wrl#RotateGizmo"

EXTERNPROTO ConstantSize [
	exposedField  SFVec3f  translation
	exposedField  SFVec3f  scaleFactor
	eventOut      SFVec3f  scale
] "proto.ConstantSize.wrl#ConstantSize"

PROTO TransformGizmos [
	exposedField  SFInt32     type                  -1
	exposedField  SFBool      isLocal               TRUE
	exposedField  SFNode      target                NULL
]{
	DEF types Switch {
		choice [
			DEF translateGizmo TranslateGizmo{}
			DEF rotateGizmo RotateGizmo{}
		]
	}

	DEF constant ConstantSize {
		scaleFactor 0.2 0.2 0.2
	}
	ROUTE constant.scale TO translateGizmo.scale
	ROUTE constant.scale TO rotateGizmo.scale


	DEF script Script {
		field         SFNode      SFNODE_NULL         NULL
		field         SFVec3f     SFVEC3F_0_0_0       0 0 0

		field         SFNode      types               USE types
		exposedField  SFInt32     type                IS type

		exposedField  SFBool      isLocal             IS isLocal
		exposedField  SFNode      target              IS target

		field         SFVec3f     initialTranslation  0 0 0
		field         SFRotation  initialRotation     0 1 0 0
		field         SFMatrix    initialMatrix       1 0 0 0  0 1 0 0  0 0 1 0  0 0 0 1

		field         SFNode      translateGizmo      USE translateGizmo
		field         SFNode      rotateGizmo         USE rotateGizmo
		field         SFNode      constant            USE constant

		eventIn       SFVec3f     onTranslationDelta
		eventIn       SFRotation  onRotationDelta
		eventIn       SFTime      onDragStart
		eventIn       SFTime      onDragEnd

		directOutput TRUE
		url "javascript:


		//-------------------------------------------------------------------//
		// Maths
		//-------------------------------------------------------------------//

		function mergeRotations(parentRotation, childRotation){
			var parentMatrix = new VrmlMatrix();
			var childMatrix = new VrmlMatrix();
			var mergedRotation = new SFRotation();
			parentMatrix.setTransform(SFVEC3F_0_0_0, parentRotation);
			childMatrix.setTransform(SFVEC3F_0_0_0, childRotation);
			parentMatrix.multLeft(childMatrix).getTransform(null, mergedRotation, null);
			return mergedRotation;
		}

		function mergeMatrices(parentMatrix, childMatrix){
			return parentMatrix.multLeft(childMatrix);
		}

		function unmergeMatrices(mergedMatrix, parentMatrix){
			return parentMatrix.inverse().multLeft(mergedMatrix);
		}

		function getTranslationMatrix(translation){
			var transform = new SFNode('Transform{}');
			transform.translation = translation;
			return new VrmlMatrix(transform.getMatrix());
		}

		function getRotationMatrix(rotation){
			var transform = new SFNode('Transform{}');
			transform.rotation = rotation;
			return new VrmlMatrix(transform.getMatrix());
		}

		function getTranslation(matrix){
			var transform = new SFNode('Transform{}');
			transform.setMatrix(matrix);
			return new SFVec3f(transform.translation);
		}


		//-------------------------------------------------------------------//
		// Types
		//-------------------------------------------------------------------//

		function refreshWhichChoice(){
			types.whichChoice = (target != SFNODE_NULL) ? type : -1;
		}
		function type(){
			refreshWhichChoice();
		}
		function target(){
			refreshWhichChoice();
			updateGizmoTranslation();
		}

		//-------------------------------------------------------------------//
		// Gizmo
		//-------------------------------------------------------------------//

		function updateGizmoTranslation(){
			if (target != SFNODE_NULL){
				constant.translation = translateGizmo.translation = rotateGizmo.translation = target.translation;
			}
		}

		function updateGizmoRotation(){
			if (target != SFNODE_NULL){
				if (isLocal){
					translateGizmo.rotation = rotateGizmo.rotation = target.rotation;
				} else {
					translateGizmo.rotation = rotateGizmo.rotation = new SFRotation();
				}
			}
		}

		function isLocal(){
			updateGizmoRotation();
		}

		function initialize(){
			updateGizmoTranslation();
			updateGizmoRotation();
			refreshWhichChoice();
		}


		//-------------------------------------------------------------------//
		// Apply the delta
		//-------------------------------------------------------------------//

		function onDragStart(){
			initialTranslation = target.translation;
			initialRotation = target.rotation;
			initialMatrix = target.getMatrix();
		}

		function onDragEnd(){
			updateGizmoRotation();
		}

		function onTranslationDelta(delta){
			var globalDelta;
			if (isLocal){
				var deltaMatrix = mergeMatrices(
					getRotationMatrix(target.rotation),
					getTranslationMatrix(delta)
				);
				globalDelta = getTranslation(deltaMatrix);
			} else {
				globalDelta = delta;
			}
			target.translation = initialTranslation.add(globalDelta);
			updateGizmoTranslation();
		}

		function onRotationDelta(delta){
//			if (isLocal){
//				target.rotation = mergeRotations(delta, initialRotation);
//			} else {
//				var outerRotationMatrix = getRotationMatrix(outerRotation);
//				target.setMatrix(
//					mergeMatrices(
//						getTranslationMatrix(initialTranslation),
//						unmergeMatrices(
//							mergeMatrices(
//								getRotationMatrix(delta),
//								mergeMatrices(
//									outerRotationMatrix,
//									getRotationMatrix(initialRotation)
//								)
//							),
//							outerRotationMatrix
//						)
//					)
//				);
//			}
		}


		"
	}

	ROUTE translateGizmo.delta_changed TO script.onTranslationDelta
	ROUTE translateGizmo.dragStart TO script.onDragStart
	ROUTE translateGizmo.dragEnd TO script.onDragEnd

	ROUTE rotateGizmo.delta_changed TO script.onRotationDelta
	ROUTE rotateGizmo.dragStart TO script.onDragStart
	ROUTE rotateGizmo.dragEnd TO script.onDragEnd
}
