#VRML V2.0 utf8

EXTERNPROTO TranslateGizmo [
	exposedField  SFVec3f     translation
	exposedField  SFRotation  rotation
	exposedField  SFVec3f     scale
	eventOut      SFTime      dragStart
	eventOut      SFTime      dragEnd
	eventOut      SFVec3f     delta_changed
] "proto.TranslateGizmo.wrl#TranslateGizmo"

EXTERNPROTO RotateGizmo [
	exposedField  SFVec3f     translation
	exposedField  SFRotation  rotation
	exposedField  SFVec3f     scale
	eventOut      SFTime      dragStart
	eventOut      SFTime      dragEnd
	eventOut      SFRotation  delta_changed
] "proto.RotateGizmo.wrl#RotateGizmo"

EXTERNPROTO ConstantSize [
	exposedField  SFVec3f  translation
	exposedField  SFVec3f  scaleFactor
	eventOut      SFVec3f  scale
] "proto.ConstantSize.wrl#ConstantSize"


PROTO TransformGizmos [

	# Transform type:
	# -1: none
	#  0: global translate
	#  1: global rotation
	#  2: local translate
	#  3: local rotation
	exposedField  SFInt32     type                  -1

	# Transform-like object that gets edited by the gizmos
	exposedField  SFNode      target                NULL
]{
	DEF gizmosTransform Transform {
		children DEF gizmosSwitch Switch {
			choice [
				DEF translateGizmo TranslateGizmo{}
				DEF rotateGizmo RotateGizmo{}
			]
		}
	}

	DEF script Script {
		field         SFNode      EMPTY_SFNODE          NULL
		field         SFVec3f     EMPTY_SFVEC3F         0 0 0
		field         SFRotation  EMPTY_SFROTATION      0 1 0 0
		field         SFNode      gizmosSwitch          USE gizmosSwitch

		exposedField  SFInt32     type                  IS type
		field         SFInt32     TYPE_NONE             -1
		field         SFInt32     TYPE_GLOBAL_TRANSLATE  0
		field         SFInt32     TYPE_GLOBAL_ROTATE     1
		field         SFInt32     TYPE_LOCAL_TRANSLATE   2
		field         SFInt32     TYPE_LOCAL_ROTATE      3

		exposedField  SFNode      target                 IS target
		exposedField  SFVec3f     gizmoTranslation       0 0 0
		exposedField  SFRotation  gizmoRotation          0 1 0 0
		field         SFVec3f     initialTranslation     0 0 0
		field         SFRotation  initialRotation        0 1 0 0

		eventIn       SFTime      onDragStart
		eventIn       SFTime      onDragEnd
		eventIn       SFVec3f     onTranslationDelta
		eventIn       SFRotation  onRotationDelta

		directOutput TRUE
		url "javascript:


		//-------------------------------------------------------------------//
		// Maths
		//-------------------------------------------------------------------//

		function mergeRotations(parentRotation, childRotation){
			var parentMatrix = new VrmlMatrix();
			var childMatrix = new VrmlMatrix();
			var mergedRotation = new SFRotation();
			parentMatrix.setTransform(EMPTY_SFVEC3F, parentRotation);
			childMatrix.setTransform(EMPTY_SFVEC3F, childRotation);
			parentMatrix.multLeft(childMatrix).getTransform(null, mergedRotation, null);
			return mergedRotation;
		}

		function mergeMatrices(parentMatrix, childMatrix){
			return parentMatrix.multLeft(childMatrix);
		}

		function unmergeMatrices(mergedMatrix, parentMatrix){
			return parentMatrix.inverse().multLeft(mergedMatrix);
		}

		function getTranslationMatrix(translation){
			var transform = new SFNode('Transform{}');
			transform.translation = translation;
			return new VrmlMatrix(transform.getMatrix());
		}

		function getRotationMatrix(rotation){
			var transform = new SFNode('Transform{}');
			transform.rotation = rotation;
			return new VrmlMatrix(transform.getMatrix());
		}

		function getTranslation(matrix){
			var transform = new SFNode('Transform{}');
			transform.setMatrix(matrix);
			return new SFVec3f(transform.translation);
		}


		//-------------------------------------------------------------------//
		// Gizmo
		//-------------------------------------------------------------------//

		function updateGizmo(){
			if (target != EMPTY_SFNODE){
				var isLocal = (type == TYPE_LOCAL_TRANSLATE) || (type == TYPE_LOCAL_ROTATE);
				gizmoTranslation = target.translation;
				gizmoRotation = isLocal ? target.rotation : EMPTY_SFROTATION;
				gizmosSwitch.whichChoice = ((type == TYPE_GLOBAL_TRANSLATE) || (type == TYPE_LOCAL_TRANSLATE)) ? 0 : 1;
			} else {
				gizmosSwitch.whichChoice = -1;
			}
		}

		function onDragStart(){
			initialTranslation = target.translation;
			initialRotation = target.rotation;
		}

		function onDragEnd(){
			updateGizmo();
		}
		function type(){
			updateGizmo();
		}
		function target(){
			updateGizmo();
		}
		function initialize(){
			updateGizmo();
		}


		//-------------------------------------------------------------------//
		// Apply the delta
		//-------------------------------------------------------------------//

		function onTranslationDelta(delta){
			var deltaMatrix = mergeMatrices(
				getRotationMatrix(gizmoRotation),
				getTranslationMatrix(delta)
			);
			var globalDelta = getTranslation(deltaMatrix);
			target.translation = initialTranslation.add(globalDelta);
		}

		function onRotationDelta(delta){
			if (type == TYPE_LOCAL_ROTATE){
				//
				//
				//
			} else {
				target.rotation = mergeRotations(delta, initialRotation);
			}
		}


		"
	}

	DEF constant ConstantSize {
		scaleFactor 0.2 0.2 0.2
	}
	ROUTE constant.scale TO translateGizmo.scale
	ROUTE constant.scale TO rotateGizmo.scale

	ROUTE script.gizmoTranslation TO constant.translation
	ROUTE script.gizmoTranslation TO gizmosTransform.translation
	ROUTE script.gizmoRotation TO gizmosTransform.rotation

	ROUTE translateGizmo.delta_changed TO script.onTranslationDelta
	ROUTE translateGizmo.dragStart TO script.onDragStart
	ROUTE translateGizmo.dragEnd TO script.onDragEnd

	ROUTE rotateGizmo.delta_changed TO script.onRotationDelta
	ROUTE rotateGizmo.dragStart TO script.onDragStart
	ROUTE rotateGizmo.dragEnd TO script.onDragEnd
}
