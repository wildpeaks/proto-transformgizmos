#VRML V2.0 utf8

PROTO Arc [
	exposedField  SFFloat  fromAngle    0
	exposedField  SFFloat  toAngle      6.28318
	exposedField  SFFloat  radius       1
	exposedField  SFFloat  tesselation  16
	field         SFBool   solid        FALSE
]{
	DEF geometry IndexedFaceSet {
		solid IS solid
		coord DEF coords Coordinate {}
	}

	Script {
		field         SFNode   geometry     USE geometry
		field         SFNode   coords       USE coords

		exposedField  SFFloat  fromAngle    IS fromAngle
		exposedField  SFFloat  toAngle      IS toAngle
		exposedField  SFFloat  radius       IS radius
		exposedField  SFFloat  tesselation  IS tesselation

		directOutput TRUE
		url "javascript:

		function refresh(){
			var positions = new MFVec3f();
			var coordIndex = new MFInt32();
			if (tesselation > 1){
				var minValue = fromAngle;
				var maxValue = toAngle;
				var delta = maxValue - minValue;
				if (delta != 0){
					var angle = minValue;
					var angleBetween = delta / tesselation;
					for (var i = 0; i < tesselation + 1; i++){
						positions[i] = new SFVec3f(-radius * Math.sin(angle), radius * Math.cos(angle), 0);
						angle += angleBetween;
					}
					positions[tesselation] = new SFVec3f(0, 0, 0);

					var j = 0;
					for (var i = 1; i < tesselation + 1; i++){
						coordIndex[j] = tesselation;
						coordIndex[j + 1] = i - 1;
						coordIndex[j + 2] = i;
						coordIndex[j + 3] = -1;
						j += 4;
					}
				}
			}
			coords.point = positions;
			geometry.coordIndex = coordIndex;
		}

		function fromAngle(){}
		function toAngle(){}
		function radius(){}
		function tesselation(){}
		function initialize(){
			refresh();
		}
		function eventsProcessed(){
			refresh();
		}

		"
	}
}


###############################################################################
# Example usage
###############################################################################

PROTO Debug [
	exposedField  SFColor     color     0 0 0
	exposedField  SFRotation  rotation  0 0 1 0
]{
	Transform {
		rotation IS	rotation
		children [
			Transform {
				translation	0 1 0
				children Shape {
					appearance Appearance {
						material Material {
							diffuseColor 0 0 0
							emissiveColor IS color
						}
					}
					geometry Cylinder {
						radius 0.005
						height 2
					}
				}
			}
		]
	}
}


Viewpoint {
	position 0.100 -0.892 4.514
	orientation 0.000 0.000 1.000 0.000
	fieldOfView 0.785
}

Background {
	skyColor .2 .2 .2
}



Debug {
	# fromAngle
	rotation 0 0 1 -2.03271222114563
	color 0 0 0
}
Debug {
	# NON-FLIPPED other example
	rotation 0 0 1 -3.018757343292236
	color 0 1 0
}

#Debug {
#	# ACTUAL flipped
#	rotation 0 0 1 2.84847903251648
#	color 0 1 0
#}
#Debug {
#	# WRONG (toAngle - 2*PI) <----- WTF it does look correct ?? is the Arc proto wrong then ????
#	rotation 0 0 1 -3.434706
#	color 1 0 0
#}


Shape {
	appearance Appearance {
		material Material {
			diffuseColor 0 0 0
			emissiveColor 0 1 0
			transparency 0.5
		}
	}
	geometry Arc {

		# Example of not Flipped (but another angle)
		fromAngle -2.03271222114563
		toAngle -3.018757343292236

		# Flipped
#		fromAngle -2.03271222114563
#		toAngle 2.84847903251648
	}
}


#Shape {
#	appearance Appearance {
#		material Material {
#			diffuseColor 0 0 0
#			emissiveColor 0 0 1
#			transparency 0.5
#		}
#	}
#	geometry Arc {
#		fromAngle -2.03271222114563

#		# ACTUAL flipped
#		toAngle 2.84847903251648

#		# EXPECTED non-flipped version, but how to calculate it ?
#		# toAngle -3.85


#		# WRONG (toAngle - 2*PI)
##		toAngle	-3.434706

#		# WRONG (toAngle - PI)
##		toAngle -0.29312
#	}
#}

